import logging
from urllib.parse import urlparse

import pytest
import requests
import textwrap

from autolib.models.qxseries.nmos import NmosClient
from autolib.coreexception import CoreException


def override_session_get(status_code: int, content: bytes) -> object:
    """\
    Create a mock Session that responds to get() calls with the specified status code and response body.

    :param status_code: The http status code that the mock should respond to for get()s
    :param content: The raw bytes response body that the mock should respond with to for get()s
    """
    class MockSession:
        def get(self, *args, **kwargs):
            response = requests.Response()
            response.status_code = status_code
            response._content = content
            return response
    return MockSession()


@pytest.fixture(scope='module')
def nmos_client():
    """\
    Create an NmosClient object - the baseurl can be anything as it won't be used as Mocks will replace the real http
    operations with faked responses. Pass in a logger and a mock hostname.
    """
    yield NmosClient('http://nowhere', logging.Logger('testlog'), 'testhost', 'Qx')


def test_get_is09_config_enabled(nmos_client):
    """\
    If the Qx responds with an enabled response check that the property is set to True
    """
    nmos_client.set_session(override_session_get(200, b'{"getSystemConfigFromIS09": "enabled"}'))
    assert nmos_client.is09_config is True


def test_get_is09_config_disabled(nmos_client):
    """\
    If the Qx responds with a disabled response check that the property is set to False
    """
    nmos_client.set_session(override_session_get(200, b'{"getSystemConfigFromIS09": "disabled"}'))
    assert nmos_client.is09_config is False


def test_get_is09_config_missing_key(nmos_client):
    """\
    If the Qx responds without the required getSystemConfigFromIS09 key make sure a KeyError is generated by the core.
    """
    nmos_client.set_session(override_session_get(200, b'{"nothingForYouHere": "enabled"}'))
    with pytest.raises(KeyError):
        _ = nmos_client.is09_config


def override_session_put(status_code: int, content: bytes) -> object:
    """\
    Create a mock Session that responds to put() calls with the specified status code and response body.

    :param status_code: The http status code that the mock should respond to for get()s
    :param content: The raw bytes response body that the mock should respond with to for get()s
    """
    class _Mock_Session:
        def put(self, *args, **kwargs):
            response = requests.Response()
            response.status_code = status_code
            response._content = content
            return response
    return _Mock_Session()


def test_set_is09_config_enabled(nmos_client):
    """\
    If the set operation is successful then no exception will be thrown
    """
    nmos_client.set_session(override_session_put(200, b'{"getSystemConfigFromIS09": "enabled"}'))

    try:
        nmos_client.is09_config = True
    except Exception as exc:
        assert False, f"Setting is09_config to True raised an exception {exc}"


def test_set_is09_config_disabled(nmos_client):
    """\
    If the set operation is successful then no exception will be thrown
    """
    nmos_client.set_session(override_session_put(200, b'{"getSystemConfigFromIS09": "disabled"}'))

    try:
        nmos_client.is09_config = False
    except Exception as exc:
        assert False, f"Setting is09_config to False raised an exception {exc}"


def test_set_is09_config_missing_key(nmos_client):
    """\
    If the Qx responds with anything other than 200 then something has gone wrong and we should get a CoreException
    from the DeviceController. It doesn't matter what's assigned to is09_config here as the PUT response will
    always behave like there was failure.
    """
    nmos_client.set_session(override_session_put(400, b'{"nothingForYouHere": "enabled"}'))
    with pytest.raises(CoreException) as exc:
        nmos_client.is09_config = "Anything"

    assert exc.value.args[0].get('message', None) == "PUT Request to http://nowhere/nmos/config produced status code: 400 - None"


def test_get_domain(nmos_client):
    """\
    Based on a Qx that replies with a dnsSearchDomain of 'newdomain' the property should be set to this value.
    """
    nmos_client.set_session(override_session_get(200, b'{"dnsSearchDomain": "newdomain"}'))
    assert nmos_client.domain == "newdomain"


def test_get_domain_empty(nmos_client):
    """\
    Based on a Qx that replies with a dnsSearchDomain of '' the property should be set to this value.
    """
    nmos_client.set_session(override_session_get(200, b'{"dnsSearchDomain": ""}'))
    assert nmos_client.domain == ""


def test_set_domain(nmos_client):
    """\
    The domain property should allow us to set the domain string without throwing a CoreException
    """
    nmos_client.set_session(override_session_put(200, b'{"dnsSearchDomain": "newdomain"}'))

    try:
        nmos_client.domain = "newdomain"
    except Exception as exc:
        assert False, f"Setting dnsSearchDomain to 'newdomain' raised an exception {exc}"


def override_session_with_mock() -> object:
    """\
    Create a mock Session that returns a predefined response to /x-nmos/node/v1.3/self.

    """
    class MockSession:
        def get(self, url, *args, **kwargs):
            parsed_url = urlparse(url)
            response = requests.Response()
            response.status_code = 404
            response._content = b''

            if parsed_url.path == "/x-nmos/node/v1.3/self":
                response.status_code = 200
                response._content = textwrap.dedent('''
                    {
                        "api": {
                            "endpoints": [
                                {
                                    "host": "192.168.0.14",
                                    "port": 3000,
                                    "protocol": "http"
                                }
                            ],
                            "versions": [
                                "v1.3"
                            ]
                        },
                        "caps": {},
                        "clocks": [
                            {
                                "name": "clk0",
                                "ref_type": "internal"
                            }
                        ],
                        "description": "qx-022000",
                        "hostname": "qx-022000.local",
                        "href": "http://192.168.0.14:3000/",
                        "id": "19004969-85e5-5b8f-b8c0-db63e859c278",
                        "interfaces": [
                            {
                                "chassis_id": "00-1f-7f-00-55-f5",
                                "name": "SFP E",
                                "port_id": "00-1f-7f-01-55-f5"
                            }
                        ],
                        "label": "qx-022000",
                        "services": [],
                        "tags": {},
                        "version": "1659719733:999999999"
                    }
                ''').encode()
            return response
    return MockSession()


def test_with_path_matching_mocker(nmos_client):
    """\
    Use the simple path matching GET mocker above in a test.
    """
    nmos_client.node.set_session(override_session_with_mock())

    try:
        assert nmos_client.node.node_self.get("label") == 'qx-022000'
    except Exception as exc:
        assert False, f"Attempt to get Node API self document raised an exception {exc}"
